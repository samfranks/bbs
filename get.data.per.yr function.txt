###############################################################
######    GETTING BBS DATA INTO THE RIGHT FORMAT FOR     ######
#############        DISTANCE ANALYSIS IN R      ##############
###############################################################

#  Written by Ali Johnston July 2009
#  Modified by Dario Massimino 2012 

get.data.per.yr<-function(species,yr,zero.obs=F){

# setwd("Z:/bbs")
# Don't forget to set the working directory.
# "species" is the two letter species code, e.g. "SF" or "D."
# "yr" is the fourr-digit year, e.g. "1994" or "2005"
# "zero.obs" is whether you want the squares in the dataset which have no observations
# of the birds in them.  This can extend the time, so the default is F.  If this is
# changed to T, then they WILL be added.

species.code<-species

file.name<-paste("ebird",substr(yr,3,4),sep="")
folder.name<-paste("data",substr(yr,3,4),sep="")
file.loc<-paste(folder.name,"/",file.name,sep="")

 dat1<-readLines(file.loc)

# Subsetting by only those observations of species you want

spec<-sapply(1:length(dat1),function(i){substr(dat1[i],44,45)})
dat2<-dat1[spec==species.code]


# Subsetting by only those observations which are seen within 100m:

dist<-sapply(1:length(dat2),function(i){substr(dat2[i],46,46)})
dat3<-dat2[dist=="1" | dist=="2"]

# All the following is executed only if there is at least one
# observation within 100m in all year

if(length(dat3)>0) {

  # Creating new variables:
  
  species<-sapply(1:length(dat3),function(i){substr(dat3[i],44,45)})
  distance<-sapply(1:length(dat3),function(i){as.numeric(as.character(substr(dat3[i],46,46)))})
  site<-sapply(1:length(dat3),function(i){substr(dat3[i],5,10)})
  observer<-sapply(1:length(dat3),function(i){substr(dat3[i],1,4)})
  
  
  # The counts for each transect section:
  
  t1<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],47,49))})
  t2<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],50,52))})
  t3<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],53,55))})
  t4<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],56,58))})
  t5<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],59,61))})
  t6<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],62,64))})
  t7<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],65,67))})
  t8<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],68,70))})
  t9<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],71,73))})
  t10<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],74,76))})
  detect<-vector(length=length(t1))
  for(i in 1:length(t1))  detect[i]<-sum(t1[i],t2[i],t3[i],t4[i],t5[i],t6[i],t7[i],t8[i],t9[i],t10[i],na.rm=T)
  eorl <- sapply(1:length(dat3),function(i){substr(dat3[i],21,21)})
  
  
  # Weather variables:
  
  cloud<-sapply(1:length(dat3),function(i){substr(dat3[i],22,22)})
  rain<-sapply(1:length(dat3),function(i){substr(dat3[i],23,23)})
  wind<-sapply(1:length(dat3),function(i){substr(dat3[i],24,24)})
  vis<-sapply(1:length(dat3),function(i){substr(dat3[i],25,25)})
  
  
  # Getting the start and finish times for the two halves:
  
  fhst.hr<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],26,27))})
  fhst.mn<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],28,29))})
  fhft.hr<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],30,31))})
  fhft.mn<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],32,33))})
  
  shst.hr<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],34,35))})
  shst.mn<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],36,37))})
  shft.hr<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],38,39))})
  shft.mn<-sapply(1:length(dat3),function(i){as.numeric(substr(dat3[i],40,41))})
  
  
  # Calculating how long the survey took for each half, in mins: 
   
  fh.hr<-sapply(1:length(dat3),function(i){ifelse(fhft.hr[i]<fhst.hr[i],fhft.hr[i]+12-fhst.hr[i],fhft.hr[i]-fhst.hr[i])})
  fh.hr.mn<-60*fh.hr
  fh.mn<-sapply(1:length(dat3),function(i){fhft.mn[i]-fhst.mn[i]})
  fh.tt<-fh.hr.mn+fh.mn
  
  sh.hr<-sapply(1:length(dat3),function(i){ifelse(shft.hr[i]<shst.hr[i],shft.hr[i]+12-shst.hr[i],shft.hr[i]-shst.hr[i])})
  sh.hr.mn<-60*sh.hr
  sh.mn<-sapply(1:length(dat3),function(i){shft.mn[i]-shst.mn[i]})
  sh.tt<-sh.hr.mn+sh.mn
  
  bh.tt<-fh.tt+sh.tt
  
  year<-rep(yr,length(dat3))
  site.tran<-tran.sec<-detect.sec<-rep(0,length(dat3))
  
  dataset1<-as.data.frame(cbind(site, observer, year, species, distance, detect, 
  t1, t2,t3,t4,t5,t6,t7,t8,t9,t10,eorl,cloud,rain,wind,vis,fh.tt,sh.tt,bh.tt,detect.sec,tran.sec,site.tran))
  
  # Check that there is no line with zero observations (it can happen if there is an error in the database)
  if (sum(dataset1$detect==0)!=0) {
  	print("The following rows have been deleted due to an error in the database")
  	print(dataset1[which(dataset1$detect==0),])
  	dataset1<-dataset1[dataset1$detect!=0,]
  }
  
  ###############################################################
  # PRODUCING ONE ROW FOR EACH TRANSECT SECTION WITH OBSERVATIONS
  # In the code below dataset2 is a temporary dataset, always holding the current record.
  # Dataset3 is the final dataset, holding all processed records.  
  
  sites<-table(dataset1$site)
  sites<-sites[sites!=0]	# This eliminates sites with 0 rows but still present in the table
  dataset3<-dataset2<-temp<-dataset1[-c(1:nrow(dataset1)),]
  
  Sys.time()
  for(i in 1:length(sites)){
    sub<-subset(dataset1,site==names(sites)[i])	# This subsets the file for one of the sites
    for(j in 1:nrow(sub)){
      a<-grep(FALSE,is.na(sub[j,7:16]))		# This finds which t sections have non-NA counts
      b<-length(a)				# How many t sections have non-NA counts
      for(k in 1:b){
        d<-a[k]+6					# identifying the column no. for that section
        dataset2<-sub[j,]
        dataset2$detect.sec<-sub[j,d]		# Getting the no. obs for that section
        dataset2$tran.sec<-a[k]			# Getting the section no. for that section
        dataset2$site.tran<-paste(dataset2$site,dataset2$tran.sec,sep="")
  						# Getting the site:section no. for that section
        temp<-rbind(temp,dataset2)
      }	# close k
    }	# close j
  dataset3<-rbind(dataset3,temp)
  temp<-dataset1[-c(1:nrow(dataset1)),]
  }	# close i
  Sys.time()
  
  # In some years non-observations are zero, not NA.  
  # So the following two lines are necessary:
  dataset3$detect.sec<-as.numeric(as.character(dataset3$detect.sec))
  dataset3a<-subset(dataset3,detect.sec>0)
  
  
  ###################################
  # READING IN THE HABITAT DATA
  # One line for each 200m section of transect.  Several habitats are able to be entered for each section. 
  
  habitat.filename<-paste(folder.name,"/ehab",substr(yr,3,4),sep="")
  
  hab1<-scan(habitat.filename,what="character",sep="\n",quiet=T)
  
  
  # CREATING NEW VARIABLES
  # For visit type 'D' denotes the habitat on the first visit, and '' the habitat on the second visit (if there are any changes).
  # There may also be a third visit type for some squares.
  
  vis.type<-sapply(1:length(hab1),function(i){substr(hab1[i],21,21)})
  
  
  # For now keep only 'D's.
  
  hab2<-hab1[vis.type=="D"]
  
  
  # Creating new variables:
  
  site<-sapply(1:length(hab2),function(i){substr(hab2[i],9,14)})
  tran.sect<-sapply(1:length(hab2),function(i){as.numeric(as.character(substr(hab2[i],22,23)))})
  habs1<-sapply(1:length(hab2),function(i){substr(hab2[i],24,24)})
  habs2<-sapply(1:length(hab2),function(i){substr(hab2[i],24,25)})
  year<-rep(yr,length(site))
  site.tran<-sapply(1:length(hab2),function(i){paste(site[i],tran.sect[i],sep="")})
  effort<-no.trans<-rep(0,length(site))
  
  habitat<-as.data.frame(cbind(year,site,tran.sect,habs1,habs2,site.tran,no.trans,effort))
  habitat$no.trans<-as.numeric(habitat$no.trans)
  habitat$effort<-as.numeric(habitat$effort)
  
  # Calculating the no of transects for which habitat is recorded for each site
  # Note: this can take some time!
  
  sites<-table(habitat$site)
  
  for(i in 1:length(sites)){
    st<-names(sites)[i]
    sub<-habitat$site==st
    locs<-grep(TRUE,sub)
    n<-length(locs)
    habitat$no.trans[locs]<-n
  }
  habitat$effort<-habitat$no.trans*0.2*0.2
  
  ###################################################
  # JOIN THE OBSERVATION AND HABITAT DATA SETS
  
  dataset4<-merge(x=dataset3a,y=habitat,by="site.tran")
  dataset4<-dataset4[,-c(28,29)]
  dimnames(dataset4)[[2]][2]<-"site"
  dimnames(dataset4)[[2]][4]<-"year"
  
  # Finding which sites have no observations, and need to be added to the dataset
  # This can take a long time too.
  
  if(zero.obs){
  
    habitat.noobs<-habitat[-c(1:nrow(habitat)),]
  
    Sys.time()
    for(i in 1:length(sites)){
      st<-names(sites)[i]
      sub<-subset(dataset4,site==st)
      sub.hab<-subset(habitat,site==st)
      if(nrow(sub)==0) {habitat.noobs<-rbind(habitat.noobs,sub.hab[1,])}
    }
  
    # Delete one of the site and one of the year columns from habitat.noobs:
  
    # fill in columns from unobserved sites
    n<-nrow(habitat.noobs)
  
    detect<-species<-observer<-rep(0,n)
    distance<-rep(NA,n)
    t1<-t2<-t3<-t4<-t5<-t6<-t7<-t8<-t9<-t10<-rep(0,n)
    eorl<-cloud<-rain<-wind<-vis<-fh.tt<-sh.tt<-bh.tt<-rep(0,n)
    detect.sec<-tran.sec<-rep(0,n)
  
    h<-habitat.noobs
    unobs.sites<-as.data.frame(cbind(h$site.tran,h$site,observer,h$year,species,
    distance,detect,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,eorl,cloud,rain,wind,vis,fh.tt,
    sh.tt,bh.tt,detect.sec,tran.sec,h$tran.sect,h$habs1,h$habs2,h$no.trans,h$effort))
  
    nam<-c("site.tran","site","year","tran.sect","habs1","habs2","no.trans","effort")
    dimnames(unobs.sites)[[2]][c(1,2,4,28,29,30,31,32)]<-nam
  
    dataset5<-suppressWarnings(rbind(dataset4,unobs.sites))
    # NB: Can ignore warnings here.  It's just because of all the zero vectors
  
  } else {
    dataset5<-dataset4
  }
  
  dimnames(dataset5)[[2]][6]<-"dist.band"
  dimnames(dataset5)[[2]][26]<-"detected"
  
  lat10k<-lon10k<-object<-distance<-distbegin<-distend<-vector(length=nrow(dataset5))
  dataset6<-cbind(dataset5,distance,distbegin,distend,object)
  
  dataset6$object<-1:nrow(dataset6)
  dataset6$distance <- ifelse(dataset6$dist.band=="1", 12.5, 62.5)
  dataset6$distbegin <- ifelse(dataset6$dist.band=="1", 0, 25)
  dataset6$distend <- ifelse(dataset6$dist.band=="1", 25, 100)
  
  # write.table(dataset6,"C:/Documents and Settings/alisonj/BBS General/Copy of Distance_in_R/SF data.txt",sep=",")
  dataset6
  #####################################################################
}
}




















